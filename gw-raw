#!/usr/bin/env bash

# check for config file and install one if needed
if [[ ! -f $HOME/.config/gw-tools.conf && ! -f $HOME/.gw-tools.conf ]]
	then
		echo "No configuration file found."
		if [[ -e $HOME/.config ]]
			then 
				echo "Copying gw-tools.conf into ~/.config"
				cp $(pwd)/gw-tools.conf $HOME/.config/gw-tools.conf
			else
				echo "Copying gw-tools.conf to ~/.gw-tools.conf"
				cp $(pwd)/gw-tools.conf $HOME/.gw-tools.conf
		fi
fi

# load configuration file
if [[ -f $HOME/.config/gw-tools.conf ]]
	then
		source $HOME/.config/gw-tools.conf
	else
		source $HOME/.gw-tools.conf
fi

# Setup parameters
raw_name="$1"
project_dir="$(pwd)/$raw_name"
revs=$default_revs
pass=1

# Log file names
log_rip="$timestamp-$pass-$name-raw.log"
log_decode="$timestamp-$pass-$name-decode.log"
log_extract="$timestamp-$pass-$name-extract.log"

# Get script location for custom configs
diskdefs="$(dirname "$(readlink -f "$0")")/diskdefs.cfg"
hxc="$(dirname "$(readlink -f "$0")")/config.script"

# Primary rip logic
# Reads disk into Kryoflux format
# Repeats recursivly one time with more revs if fails verification
# Take as drive letter and TSPEC
function rip # 1-Drive 2-Tracks
{
	# Check for Drive parameters
	# I would recommend using A/B over 0/1 because "0" doesn't work for me
	if [[ "$1" != "" ]]
	then
		drive="--drive=$1"
	else
		drive=""
	fi

	# Check for doublestepping
	if [[ "$DSTEP" = "1" ]]
	then
		step=":step=2"
	else
		step=""
	fi

	# Check for track information
	# This is the full TSPEC that gw supports, over ripping tracks is 
	# preferable, but you need to limit to 40 on a DD 360k drive.
	if [[ "$2" != "" ]]
	then
		tracks="--tracks $2$step"
	else
		tracks=""
	fi

	echo "Ripping [$raw_name]"

	# Make subdir for flux data
	rdir="$raw_name-raw$revs"
	mkdir -p "$rdir"

	# Proceed to rip
	raw="$rdir/track00.0.raw"
	if [[ ! -f "$raw" ]]
	then
		gw read $drive $tracks --revs=$revs "$raw"  2>&1 | tee -a "$log_rip"
	else
		echo "Kryoflux rips found, skipping to decode"
	fi
	
	# Generate image of flux
	map
	# Use overloaded decode for verifying data
	decode
	# Use local verification based on log
	decode_verify
	# Check results to determine action
	result="$?"
	if [[ "$result" == "2" ]]
	then
		if [[ "$revs" == "3" ]]
		then
			revs=$invalid_revs
			echo "Re-ripping with $revs revs"
			pass=2
			rip "$1" "$2"
		else
			echo "Already bumped up revs, giving up"
		fi
	fi
	# Extract files from decoded image or reduce revs back
	if [[ "$revs" == "3" ]]
	then
		extract
	else
		revs=$default_revs
	fi
	# only scan if it's enabled in config
	if [[ "$scanimage" == "1" ]]
	then
		scan
	else
		echo "Disk scanning disabled, skipping..."
	fi
}

# Use log file from gw to check if the rip was valid
function decode_verify # 1-Log Name
{
	# If there is no log just return
	if [[ ! -f $log_decode ]]
	then
		return 0
	fi

	sectors_found="$(cat "$log_decode" | grep Found | awk '{print $2}')"
	sectors_total="$(cat "$log_decode" | grep Found | awk '{print $5}')"

	echo "Decoded $sectors_found/$sectors_total"
	if [[ "$sectors_found" != "$sectors_total"  ]]
	then
		if [[ "$sectors_found" == "0"  ]]
		then
			echo "No sectors found, is the format correct?"
			return 1
		else
			echo "Sector errors found"
			return 2
		fi
	fi
	
	return 0
}

# Creates an image of the sector map using HxC Floppy tools
function map
{
	if [[ "$(which hxcfe)" == "" ]]
	then
		echo "Put hxcfe in your path to enable disk flux map images"
		return 1
	fi
	if [[ -f "$raw_name-raw$revs".png ]]
	then
		echo "Image exists"
		return 0
	fi

	cd "$(dirname "$(which hxcfe)")"
	hxcfe -script:"$hxc" -finput:"$project_dir/$raw" -foutput:"$project_dir/$raw_name-raw$revs".bmp -conv:BMP_DISK_IMAGE
	cd "$project_dir"

	# if 'convert' exists and returns a version of less than 7, use it.
	# If not, use 'magick' (IM7+).
	if [[ "$(convert 2>/dev/null)" && "$(convert -version 2>/dev/null | grep -Po 'Version\:\sImageMagick\s\K\d')" -lt "7" ]]
	then 
		im_command="convert"
	else
		im_command="magick"
	fi
	# convert bmp to png
	"$im_command" "$raw_name-raw$revs".bmp "$raw_name-raw$revs".png
	rm "$raw_name-raw$revs".bmp
}

# Use flatbed scanner to save an image of the floppy itself
function scan
{
	if [[ "$(which scanimage)" == "" ]]
	then
		echo "'scanimage' is not installed or not in PATH. Cannot scan."
		return 1
	fi

	if [[ "$disk_xsize_override" == "" && "$disk_ysize_override" == "" ]]
	then
		if [[ ! "$disk_size" == "3.5" && ! "$disk_size" == "5.25" && ! "$disk_size" == "8" || "$disk_size" == "" ]]
		then
			echo "Variable 'disk_size' not set or unknown size, defaulting to an 8"\"" disk."
			disk_xsize="203.5"
			disk_xsize="203.5"
		else
			if [[ $disk_size == "8" ]]
			then
				disk_xsize="203.5"
				disk_ysize="203.5"
			fi
			if [[ $disk_size == "5.25" ]]
			then
				disk_xsize="133.5"
				disk_ysize="133.5"
			fi
			if [[ $disk_size == "3.5" ]]
			then
				disk_xsize="90.5"
				disk_ysize="94"
			fi
		fi
	else
		echo "Default scanning dimensions overridden, using "$disk_xsize_override"x"$disk_ysize_override"mm."
		disk_xsize="$disk_xsize_override"
		disk_ysize="$disk_ysize_override"
	fi
	
	if [[ -f "$project_dir"/"$raw_name"_floppyscan.png ]]
	then
		echo "Floppy disk already scanned. Skipping."
	else
		read -n1 -r -p "Place disk on scanner. Press any key to begin scan." key
		echo ""; echo ""
		echo "Scanning floppy disk in background."
		scanimage -d "$scanner" -x"$disk_xsize" -y"$disk_ysize" --mode color --resolution "$scan_dpi" --format "$scan_format" -o "$project_dir"/"$raw_name"_floppyscan."$scan_format" &>/dev/null & disown;
	fi
}

# This function should be overloaded in a format script
function decode # 1-Nothing
{
	echo "No format to decode"
}

# This function should be overloaded in a format script
function extract # 1-Nothing
{
	echo "No extract process"
}



# If this is sourced from another script pass "source" as the second parameter
# This will disable the plain ripping of kryoflux files only
if [[ "$2" == "source" ]]
then
	return 0
fi



echo "Ripping raw data only"

# Create dir based on name and rip within it
mkdir "$raw_name"
cd "$project_dir"
rip A
cd ..

